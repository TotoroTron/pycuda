Traceback (most recent call last):
  File "main.py", line 84, in <module>
    main()
  File "main.py", line 68, in main
    m.matmul_cudajit_sharedmem[blocks_per_grid, threads_per_block](d_matA, d_matB, d_matC)
  File "/home/bbc33/anaconda3/envs/pycuda/lib/python3.6/site-packages/numba/cuda/compiler.py", line 798, in __call__
    kernel = self.specialize(*args)
  File "/home/bbc33/anaconda3/envs/pycuda/lib/python3.6/site-packages/numba/cuda/compiler.py", line 809, in specialize
    kernel = self.compile(argtypes)
  File "/home/bbc33/anaconda3/envs/pycuda/lib/python3.6/site-packages/numba/cuda/compiler.py", line 825, in compile
    **self.targetoptions)
  File "/home/bbc33/anaconda3/envs/pycuda/lib/python3.6/site-packages/numba/compiler_lock.py", line 32, in _acquire_compile_lock
    return func(*args, **kwargs)
  File "/home/bbc33/anaconda3/envs/pycuda/lib/python3.6/site-packages/numba/cuda/compiler.py", line 61, in compile_kernel
    cres = compile_cuda(pyfunc, types.void, args, debug=debug, inline=inline)
  File "/home/bbc33/anaconda3/envs/pycuda/lib/python3.6/site-packages/numba/compiler_lock.py", line 32, in _acquire_compile_lock
    return func(*args, **kwargs)
  File "/home/bbc33/anaconda3/envs/pycuda/lib/python3.6/site-packages/numba/cuda/compiler.py", line 50, in compile_cuda
    locals={})
  File "/home/bbc33/anaconda3/envs/pycuda/lib/python3.6/site-packages/numba/compiler.py", line 551, in compile_extra
    return pipeline.compile_extra(func)
  File "/home/bbc33/anaconda3/envs/pycuda/lib/python3.6/site-packages/numba/compiler.py", line 331, in compile_extra
    return self._compile_bytecode()
  File "/home/bbc33/anaconda3/envs/pycuda/lib/python3.6/site-packages/numba/compiler.py", line 393, in _compile_bytecode
    return self._compile_core()
  File "/home/bbc33/anaconda3/envs/pycuda/lib/python3.6/site-packages/numba/compiler.py", line 373, in _compile_core
    raise e
  File "/home/bbc33/anaconda3/envs/pycuda/lib/python3.6/site-packages/numba/compiler.py", line 364, in _compile_core
    pm.run(self.state)
  File "/home/bbc33/anaconda3/envs/pycuda/lib/python3.6/site-packages/numba/compiler_machinery.py", line 347, in run
    raise patched_exception
  File "/home/bbc33/anaconda3/envs/pycuda/lib/python3.6/site-packages/numba/compiler_machinery.py", line 338, in run
    self._runPass(idx, pass_inst, state)
  File "/home/bbc33/anaconda3/envs/pycuda/lib/python3.6/site-packages/numba/compiler_lock.py", line 32, in _acquire_compile_lock
    return func(*args, **kwargs)
  File "/home/bbc33/anaconda3/envs/pycuda/lib/python3.6/site-packages/numba/compiler_machinery.py", line 302, in _runPass
    mutated |= check(pss.run_pass, internal_state)
  File "/home/bbc33/anaconda3/envs/pycuda/lib/python3.6/site-packages/numba/compiler_machinery.py", line 275, in check
    mangled = func(compiler_state)
  File "/home/bbc33/anaconda3/envs/pycuda/lib/python3.6/site-packages/numba/typed_passes.py", line 95, in run_pass
    raise_errors=self._raise_errors)
  File "/home/bbc33/anaconda3/envs/pycuda/lib/python3.6/site-packages/numba/typed_passes.py", line 66, in type_inference_stage
    infer.build_constraint()
  File "/home/bbc33/anaconda3/envs/pycuda/lib/python3.6/site-packages/numba/typeinfer.py", line 938, in build_constraint
    self.constrain_statement(inst)
  File "/home/bbc33/anaconda3/envs/pycuda/lib/python3.6/site-packages/numba/typeinfer.py", line 1274, in constrain_statement
    self.typeof_assign(inst)
  File "/home/bbc33/anaconda3/envs/pycuda/lib/python3.6/site-packages/numba/typeinfer.py", line 1345, in typeof_assign
    self.typeof_global(inst, inst.target, value)
  File "/home/bbc33/anaconda3/envs/pycuda/lib/python3.6/site-packages/numba/typeinfer.py", line 1444, in typeof_global
    typ = self.resolve_value_type(inst, gvar.value)
  File "/home/bbc33/anaconda3/envs/pycuda/lib/python3.6/site-packages/numba/typeinfer.py", line 1366, in resolve_value_type
    raise TypingError(msg, loc=inst.loc)
numba.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
Untyped global name 'float32': cannot determine Numba type of <class 'numba.ir.UndefinedType'>

File "matmul.py", line 72:
def matmul_cudajit_sharedmem(A, B, C):
    <source elided>
    # The size and type of the arrays must be known at compile time.  
    sA = cuda.shared.array(shape=(TPB, TPB), dtype=float32)
    ^

